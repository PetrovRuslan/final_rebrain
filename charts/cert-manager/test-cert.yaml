apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt
spec:
  acme:
    email: ov@fevlake.com
    privateKeySecretRef:
      name: letsencrypt-private-key
    server: https://acme-v02.api.letsencrypt.org/directory
    solvers:
    - http01:
       ingress:
         class: nginx

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nginx
    spec:
      containers:
        - name: nginx
          image: nginx
---
apiVersion: v1
kind: Service
metadata:
 name: nginx-svc
spec:
 type: ClusterIP
 selector:
   app.kubernetes.io/name: nginx
 ports:
 - port: 80
   targetPort: 80

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: back
  annotations:
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/auth-type: "basic"
    nginx.ingress.kubernetes.io/auth-secret: "basic-auth"
    nginx.ingress.kubernetes.io/auth-secret-type: "auth-file"
    # Указываем, каким образом выписывать сертификат
    cert-manager.io/cluster-issuer: "letsencrypt"
spec:
  ingressClassName: nginx
  rules:
  - host: my-sandbox.ru
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nginx
            port:
              number: 80
  # Указываем настройки для tls — для какого хоста нужен tls и куда сохранить полученный сертификат
  tls:
  - hosts:
    - my-sandbox.ru
    secretName: back-dev-kis-im-cert